#!/usr/bin/env python3
"""
üîê Script de Verificaci√≥n de Seguridad
Verifica que la aplicaci√≥n est√© configurada de manera segura antes del despliegue
"""

import os
import re
import glob
import sys

def verificar_tokens_en_codigo():
    """Verifica que no hay tokens hardcodeados en el c√≥digo"""
    print("üîç Verificando tokens en c√≥digo fuente...")
    
    archivos_python = glob.glob("*.py")
    tokens_encontrados = []
    
    patron_token = re.compile(r'pk_[A-Za-z0-9_]+')
    
    for archivo in archivos_python:
        with open(archivo, 'r', encoding='utf-8') as f:
            contenido = f.read()
            matches = patron_token.findall(contenido)
            if matches:
                tokens_encontrados.append((archivo, matches))
    
    if tokens_encontrados:
        print("‚ùå TOKENS ENCONTRADOS EN C√ìDIGO:")
        for archivo, tokens in tokens_encontrados:
            print(f"   üìÑ {archivo}: {tokens}")
        return False
    else:
        print("‚úÖ No se encontraron tokens hardcodeados")
        return True

def verificar_gitignore():
    """Verifica que .gitignore protege archivos sensibles"""
    print("üîç Verificando .gitignore...")
    
    if not os.path.exists('.gitignore'):
        print("‚ùå Archivo .gitignore no encontrado")
        return False
    
    with open('.gitignore', 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    archivos_criticos = [
        'secrets.toml',
        '.env',
        '*.env'
    ]
    
    missing = []
    for archivo in archivos_criticos:
        if archivo not in contenido:
            missing.append(archivo)
    
    if missing:
        print(f"‚ùå Archivos faltantes en .gitignore: {missing}")
        return False
    else:
        print("‚úÖ .gitignore protege archivos sensibles")
        return True

def verificar_secrets_locales():
    """Verifica configuraci√≥n de secrets locales"""
    print("üîç Verificando secrets locales...")
    
    secrets_path = '.streamlit/secrets.toml'
    
    if os.path.exists(secrets_path):
        print("‚úÖ Archivo secrets.toml encontrado")
        
        # Verificar que tiene la estructura correcta
        with open(secrets_path, 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        if '[clickup]' in contenido and 'api_token' in contenido:
            print("‚úÖ Estructura de secrets correcta")
            return True
        else:
            print("‚ùå Estructura de secrets incorrecta")
            return False
    else:
        print("‚ö†Ô∏è  Archivo secrets.toml no encontrado (normal para producci√≥n)")
        return True

def verificar_variables_entorno():
    """Verifica variables de entorno"""
    print("üîç Verificando variables de entorno...")
    
    token = os.getenv('CLICKUP_API_TOKEN')
    space_id = os.getenv('CLICKUP_SPACE_ID')
    
    if token:
        print("‚úÖ CLICKUP_API_TOKEN configurado")
        if token.startswith('pk_'):
            print("‚úÖ Formato de token correcto")
        else:
            print("‚ùå Formato de token incorrecto")
            return False
    else:
        print("‚ö†Ô∏è  CLICKUP_API_TOKEN no configurado (puede usar secrets)")
    
    if space_id:
        print("‚úÖ CLICKUP_SPACE_ID configurado")
    else:
        print("‚ö†Ô∏è  CLICKUP_SPACE_ID no configurado")
    
    return True

def verificar_dependencias():
    """Verifica que requirements.txt est√° actualizado"""
    print("üîç Verificando dependencias...")
    
    if not os.path.exists('requirements.txt'):
        print("‚ùå requirements.txt no encontrado")
        return False
    
    dependencias_requeridas = [
        'streamlit',
        'pandas',
        'plotly',
        'requests',
        'openpyxl'
    ]
    
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        contenido = f.read().lower()
    
    missing = []
    for dep in dependencias_requeridas:
        if dep not in contenido:
            missing.append(dep)
    
    if missing:
        print(f"‚ùå Dependencias faltantes: {missing}")
        return False
    else:
        print("‚úÖ Todas las dependencias est√°n presentes")
        return True

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîê VERIFICACI√ìN DE SEGURIDAD - ClickUp Gantt App")
    print("=" * 50)
    
    verificaciones = [
        verificar_tokens_en_codigo,
        verificar_gitignore,
        verificar_secrets_locales,
        verificar_variables_entorno,
        verificar_dependencias
    ]
    
    resultados = []
    for verificacion in verificaciones:
        resultado = verificacion()
        resultados.append(resultado)
        print()
    
    # Resumen
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 30)
    
    exitosos = sum(resultados)
    total = len(resultados)
    
    if exitosos == total:
        print("üéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("‚úÖ Tu aplicaci√≥n est√° lista para despliegue seguro")
        sys.exit(0)
    else:
        print(f"‚ö†Ô∏è  {exitosos}/{total} verificaciones pasaron")
        print("‚ùå Revisa los errores antes de desplegar")
        sys.exit(1)

if __name__ == "__main__":
    main()
